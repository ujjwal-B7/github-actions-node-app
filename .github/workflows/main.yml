name: node-app-github-actions

# on: push

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
      fail-fast: false # defining multiple node versions to run multiple jobs for each node version variations

    steps:
      # cloning the repo to run the below steps on this repo code
      - uses: actions/checkout@v4

      - name: Use node
        uses: actions/setup-node@v4
        with:
          # node-version: 18 # static node version value
          node-version: ${{ matrix.node }} # dynamic node version, each time a new job will execute for each node versions mentioned in matrix

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # path of downloaded packages on github runners
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install && npm run build

      # persisting build from this job so that it can later be used in another job
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          # name: node-app-build-${{ github.run_id }} # for a single version of node we can use so

          # while using strategy, use matrix for distinct artifact naming
          name: node-app-build-${{ matrix.node }}
          path: dist/

      #  previously test was also inside build, but now putting it in separate job
      # - name: Run tests
      #   run: npm test

      - name: Run only on main branch
        if: github.ref == 'refs/heads/main'
        run: echo "We are on main branch"

      - name: Run only on pull request
        if: github.event_name == 'pull_request'
        run: echo "This is a PR!"

      - name: Print environment variable
        run: echo "API_KEY is $API_KEY"
        env:
          API_KEY: ${{ secrets.API_KEY }}

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use node
        uses: actions/setup-node@v4
        with:
          # node-version: ${{ matrix.node }}
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  #conditional job rendering main, dev, staging

  deploy-in-main: # deploying in render
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      
      - name: Deploying in render
        uses: JorgeLNJunior/render-deploy@v1.4.4
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          clear_cache: true
          wait_deploy: true
          github_deployment: true
          deployment_environment: "production"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-in-staging:
    if: github.ref == 'refs/heads/staging'

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
      fail-fast: false # disabling it to see which version thrown error and which actually passed
    needs: test

    steps:
      - name: Deploying in staging # simulating staging
        uses: actions/download-artifact@v4
        with:
          name: node-app-build-${{ matrix.node }}
          path: dist/

      - run: ls dist/

  deploy-in-dev:
    if: github.ref == 'refs/heads/dev'

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20]
      fail-fast: false
    needs: test

    steps:
      - name: Deploying in dev # simulating dev
        uses: actions/download-artifact@v4
        with:
          name: node-app-build-${{ matrix.node }}
          path: dist/

      - run: ls dist/
